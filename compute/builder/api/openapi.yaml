openapi: 3.0.2
info:
  title: Builder API
  version: "1.0"
servers:
- description: Local development server (routes to 127.0.0.1)
  url: http://local.suborbital.network:{port}
  variables:
    port:
      default: "8082"
- description: Production server
  url: '{method}://{hostname}:{port}'
  variables:
    method:
      default: https
    hostname:
      default: 0.0.0.0
    port:
      default: "8082"
paths:
  /api/v1/health:
    get:
      operationId: getHealth
      responses:
        "200":
          description: OK
      summary: Returns an OK response to indicate a healthy service (returns no body)
  /api/v1/features:
    get:
      operationId: getFeatures
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: OK
        "404":
          description: If this route returns a 404, assume that no additional features
            (such as testing) are supported.
      summary: Returns a list of supported builder features. Primarily used to detect
        the presence of a testing service.
  /api/v1/template/{language}:
    get:
      operationId: getTemplate
      parameters:
      - description: The language toolchain used to configure the builder
        example: assemblyscript
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: namespace
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditorState'
          description: OK
      summary: Gets the template for a new function of the given language
  /api/v2/template/{language}/{fnName}:
    get:
      operationId: getTemplateV2
      parameters:
      - description: The language toolchain used to configure the builder
        example: assemblyscript
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
      - description: The function name (customer-defined)
        example: httpget
        in: path
        name: fnName
        required: true
        schema:
          type: string
      - explode: true
        in: query
        name: namespace
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditorState'
          description: OK
      summary: Gets the template for a new function of the given language initialized
        with the supplied function name
  /api/v1/build/{language}/{environment}.{customerID}/{namespace}/{fnName}:
    post:
      operationId: buildFunction
      parameters:
      - description: The language toolchain used to configure the builder
        example: assemblyscript
        explode: false
        in: path
        name: language
        required: true
        schema:
          type: string
        style: simple
      - description: The root compute environment (i.e. the vendor)
        example: com.suborbital
        in: path
        name: environment
        required: true
        schema:
          type: string
      - description: The vendor's customer (i.e. the user)
        example: acmeco
        in: path
        name: customerID
        required: true
        schema:
          type: string
      - description: The function namespace (vendor-defined groups of functions)
        example: default
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: The function name (customer-defined)
        example: httpget
        in: path
        name: fnName
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: Bytes of the code to be built, for example the contents of lib.rs
          or lib.ts
        required: true
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: logs
                type: string
          description: OK
      security:
      - bearerAuthentication: []
      summary: Builds the provided code using the specified language toolchain
  /api/v1/draft/{environment}.{customerId}/{namespace}/{fnName}:
    get:
      operationId: getDraft
      parameters:
      - description: The root compute environment (i.e. the vendor)
        example: com.suborbital
        in: path
        name: environment
        required: true
        schema:
          type: string
      - description: The vendor's customer (i.e. the user)
        example: acmeco
        in: path
        name: customerID
        required: true
        schema:
          type: string
      - description: The function namespace (vendor-defined groups of functions)
        example: default
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: The function name (customer-defined)
        example: httpget
        in: path
        name: fnName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditorState'
          description: OK
      security:
      - bearerAuthentication: []
      summary: Gets the draft for the specified runnable
  /api/v1/draft/{environment}.{customerId}/{namespace}/{fnName}/promote:
    post:
      operationId: deployDraft
      parameters:
      - description: The root compute environment (i.e. the vendor)
        example: com.suborbital
        in: path
        name: environment
        required: true
        schema:
          type: string
      - description: The vendor's customer (i.e. the user)
        example: acmeco
        in: path
        name: customerID
        required: true
        schema:
          type: string
      - description: The function namespace (vendor-defined groups of functions)
        example: default
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: The function name (customer-defined)
        example: httpget
        in: path
        name: fnName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: ok
                type: string
          description: OK
      security:
      - bearerAuthentication: []
      summary: Deploys the specified runnable
  /api/v1/test/{environment}.{customerId}/{namespace}/{fnName}:
    post:
      operationId: testDraft
      parameters:
      - description: The root compute environment (i.e. the vendor)
        example: com.suborbital
        in: path
        name: environment
        required: true
        schema:
          type: string
      - description: The vendor's customer (i.e. the user)
        example: acmeco
        in: path
        name: customerID
        required: true
        schema:
          type: string
      - description: The function namespace (vendor-defined groups of functions)
        example: default
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: The function name (customer-defined)
        example: httpget
        in: path
        name: fnName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
          description: OK
      security:
      - bearerAuthentication: []
      summary: Tests drafts
components:
  parameters:
    languageParam:
      description: The language toolchain used to configure the builder
      example: assemblyscript
      explode: false
      in: path
      name: language
      required: true
      schema:
        type: string
      style: simple
  schemas:
    TestPayload:
      example:
        payload: payload
        name: name
        description: description
      properties:
        name:
          type: string
        description:
          type: string
        payload:
          type: string
      required:
      - name
      - payload
      type: object
    EditorState:
      example:
        tests:
        - payload: payload
          name: name
          description: description
        - payload: payload
          name: name
          description: description
        contents: |2
           ```rust
           import { logInfo } from "@suborbital/suborbital"

           export function run(input: ArrayBuffer): ArrayBuffer {
             let inStr = String.UTF8.decode(input)

             let out = "Hello there, " + inStr

             return String.UTF8.encode(out)
           }
           ```
        lang: rust
      properties:
        lang:
          description: The language of a runnable
          example: rust
          type: string
        contents:
          description: The source code of a runnable
          example: |2
             ```rust
             import { logInfo } from "@suborbital/suborbital"

             export function run(input: ArrayBuffer): ArrayBuffer {
               let inStr = String.UTF8.decode(input)

               let out = "Hello there, " + inStr

               return String.UTF8.encode(out)
             }
             ```
          type: string
        tests:
          description: An array of tests
          items:
            $ref: '#/components/schemas/TestPayload'
          type: array
      required:
      - contents
      - lang
      type: object
    inline_response_200:
      example:
        features:
        - features
        - features
      properties:
        features:
          items:
            type: string
          type: array
      required:
      - features
      type: object
    inline_response_200_1:
      example:
        result: result
      properties:
        result:
          type: string
      required:
      - result
      type: object
  securitySchemes:
    bearerAuthentication:
      bearerFormat: 'Bearer: <editor token>'
      description: Builder API requests require a Bearer header with an editor token.
        Obtain an editor token from the Adminstrative API.
      scheme: bearer
      type: http
