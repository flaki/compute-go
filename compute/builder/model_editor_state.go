/*
Builder API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EditorState struct for EditorState
type EditorState struct {
	// The language of a runnable
	Lang string `json:"lang"`
	// The source code of a runnable
	Contents string `json:"contents"`
	// An array of tests
	Tests *[]TestPayload `json:"tests,omitempty"`
}

// NewEditorState instantiates a new EditorState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditorState(lang string, contents string) *EditorState {
	this := EditorState{}
	this.Lang = lang
	this.Contents = contents
	return &this
}

// NewEditorStateWithDefaults instantiates a new EditorState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditorStateWithDefaults() *EditorState {
	this := EditorState{}
	return &this
}

// GetLang returns the Lang field value
func (o *EditorState) GetLang() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Lang
}

// GetLangOk returns a tuple with the Lang field value
// and a boolean to check if the value has been set.
func (o *EditorState) GetLangOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Lang, true
}

// SetLang sets field value
func (o *EditorState) SetLang(v string) {
	o.Lang = v
}

// GetContents returns the Contents field value
func (o *EditorState) GetContents() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
func (o *EditorState) GetContentsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Contents, true
}

// SetContents sets field value
func (o *EditorState) SetContents(v string) {
	o.Contents = v
}

// GetTests returns the Tests field value if set, zero value otherwise.
func (o *EditorState) GetTests() []TestPayload {
	if o == nil || o.Tests == nil {
		var ret []TestPayload
		return ret
	}
	return *o.Tests
}

// GetTestsOk returns a tuple with the Tests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditorState) GetTestsOk() (*[]TestPayload, bool) {
	if o == nil || o.Tests == nil {
		return nil, false
	}
	return o.Tests, true
}

// HasTests returns a boolean if a field has been set.
func (o *EditorState) HasTests() bool {
	if o != nil && o.Tests != nil {
		return true
	}

	return false
}

// SetTests gets a reference to the given []TestPayload and assigns it to the Tests field.
func (o *EditorState) SetTests(v []TestPayload) {
	o.Tests = &v
}

func (o EditorState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["lang"] = o.Lang
	}
	if true {
		toSerialize["contents"] = o.Contents
	}
	if o.Tests != nil {
		toSerialize["tests"] = o.Tests
	}
	return json.Marshal(toSerialize)
}

type NullableEditorState struct {
	value *EditorState
	isSet bool
}

func (v NullableEditorState) Get() *EditorState {
	return v.value
}

func (v *NullableEditorState) Set(val *EditorState) {
	v.value = val
	v.isSet = true
}

func (v NullableEditorState) IsSet() bool {
	return v.isSet
}

func (v *NullableEditorState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditorState(val *EditorState) *NullableEditorState {
	return &NullableEditorState{value: val, isSet: true}
}

func (v NullableEditorState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditorState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


